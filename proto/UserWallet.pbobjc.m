// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.wallet.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "UserWallet.pbobjc.h"
#import "Common.pbobjc.h"
#import "UserWalletCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - UserWalletRoot

@implementation UserWalletRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CommonRoot extensionRegistry]];
    [registry addExtensions:[UserWalletCommonRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - UserWalletRoot_FileDescriptor

static GPBFileDescriptor *UserWalletRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GetPayDetailParam

@implementation GetPayDetailParam

@dynamic appId;
@dynamic orderNo;

typedef struct GetPayDetailParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *orderNo;
} GetPayDetailParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .number = GetPayDetailParam_FieldNumber_AppId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetPayDetailParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderNo",
        .number = GetPayDetailParam_FieldNumber_OrderNo,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetPayDetailParam__storage_, orderNo),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\005\000\002\007\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPayDetailParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetPayDetailParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetPayDetailResp

@implementation GetPayDetailResp

@dynamic hasResp, resp;
@dynamic hasDetail, detail;

typedef struct GetPayDetailResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  PayDetail *detail;
} GetPayDetailResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = GetPayDetailResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GetPayDetailResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "detail",
        .number = GetPayDetailResp_FieldNumber_Detail,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GetPayDetailResp__storage_, detail),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PayDetail),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetPayDetailResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetPayDetailResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserWalletParam

@implementation GetUserWalletParam

@dynamic token;

typedef struct GetUserWalletParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} GetUserWalletParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = GetUserWalletParam_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GetUserWalletParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserWalletParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetUserWalletParam__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetUserWalletResp

@implementation GetUserWalletResp

@dynamic hasResp, resp;
@dynamic hasWallet, wallet;

typedef struct GetUserWalletResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  UserWallet *wallet;
} GetUserWalletResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = GetUserWalletResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GetUserWalletResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "wallet",
        .number = GetUserWalletResp_FieldNumber_Wallet,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GetUserWalletResp__storage_, wallet),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserWallet),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetUserWalletResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GetUserWalletResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ListUserWalletHistoriesParam

@implementation ListUserWalletHistoriesParam

@dynamic token;
@dynamic type;
@dynamic start;
@dynamic end;
@dynamic page;
@dynamic count;

typedef struct ListUserWalletHistoriesParam__storage_ {
  uint32_t _has_storage_[1];
  UserWalletHistoryType type;
  NSString *token;
  int64_t start;
  int64_t end;
  int64_t page;
  int64_t count;
} ListUserWalletHistoriesParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = ListUserWalletHistoriesParam_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = ListUserWalletHistoriesParam_FieldNumber_Type,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, type),
        .defaultValue.valueEnum = UserWalletHistoryType_InvalidWht,
        .dataTypeSpecific.enumDescFunc = UserWalletHistoryType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "start",
        .number = ListUserWalletHistoriesParam_FieldNumber_Start,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, start),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "end",
        .number = ListUserWalletHistoriesParam_FieldNumber_End,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, end),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "page",
        .number = ListUserWalletHistoriesParam_FieldNumber_Page,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, page),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "count",
        .number = ListUserWalletHistoriesParam_FieldNumber_Count,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ListUserWalletHistoriesParam__storage_, count),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListUserWalletHistoriesParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListUserWalletHistoriesParam__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ListUserWalletHistoriesParam_Type_RawValue(ListUserWalletHistoriesParam *message) {
  GPBDescriptor *descriptor = [ListUserWalletHistoriesParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListUserWalletHistoriesParam_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetListUserWalletHistoriesParam_Type_RawValue(ListUserWalletHistoriesParam *message, int32_t value) {
  GPBDescriptor *descriptor = [ListUserWalletHistoriesParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ListUserWalletHistoriesParam_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ListUserWalletHistoriesResp

@implementation ListUserWalletHistoriesResp

@dynamic hasResp, resp;
@dynamic historiesArray, historiesArray_Count;

typedef struct ListUserWalletHistoriesResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  NSMutableArray *historiesArray;
} ListUserWalletHistoriesResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = ListUserWalletHistoriesResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListUserWalletHistoriesResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "historiesArray",
        .number = ListUserWalletHistoriesResp_FieldNumber_HistoriesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ListUserWalletHistoriesResp__storage_, historiesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserWalletHistory),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ListUserWalletHistoriesResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ListUserWalletHistoriesResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrepareUserWalletRechargeParam

@implementation PrepareUserWalletRechargeParam

@dynamic token;
@dynamic amount;
@dynamic appId;

typedef struct PrepareUserWalletRechargeParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *appId;
  uint64_t amount;
} PrepareUserWalletRechargeParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = PrepareUserWalletRechargeParam_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(PrepareUserWalletRechargeParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = PrepareUserWalletRechargeParam_FieldNumber_Amount,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
        .offset = offsetof(PrepareUserWalletRechargeParam__storage_, amount),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "appId",
        .number = PrepareUserWalletRechargeParam_FieldNumber_AppId,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(PrepareUserWalletRechargeParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\003\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrepareUserWalletRechargeParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrepareUserWalletRechargeParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrepareUserWalletRechargeResp

@implementation PrepareUserWalletRechargeResp

@dynamic hasResp, resp;
@dynamic hasHistory, history;

typedef struct PrepareUserWalletRechargeResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  UserWalletHistory *history;
} PrepareUserWalletRechargeResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = PrepareUserWalletRechargeResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PrepareUserWalletRechargeResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "history",
        .number = PrepareUserWalletRechargeResp_FieldNumber_History,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PrepareUserWalletRechargeResp__storage_, history),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserWalletHistory),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrepareUserWalletRechargeResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrepareUserWalletRechargeResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserWalletPayParam

@implementation UserWalletPayParam

@dynamic appId;
@dynamic orderId;
@dynamic subject;
@dynamic body;
@dynamic amount;
@dynamic token;
@dynamic password;

typedef struct UserWalletPayParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *orderId;
  NSString *subject;
  NSString *body;
  NSString *token;
  NSString *password;
  uint64_t amount;
} UserWalletPayParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .number = UserWalletPayParam_FieldNumber_AppId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "orderId",
        .number = UserWalletPayParam_FieldNumber_OrderId,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, orderId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "subject",
        .number = UserWalletPayParam_FieldNumber_Subject,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, subject),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "body",
        .number = UserWalletPayParam_FieldNumber_Body,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, body),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = UserWalletPayParam_FieldNumber_Amount,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
        .offset = offsetof(UserWalletPayParam__storage_, amount),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = UserWalletPayParam_FieldNumber_Token,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = UserWalletPayParam_FieldNumber_Password,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletPayParam__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\005\000\002\007\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserWalletPayParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserWalletPayParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserWalletPayResp

@implementation UserWalletPayResp

@dynamic hasResp, resp;
@dynamic hasHistory, history;

typedef struct UserWalletPayResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  UserWalletHistory *history;
} UserWalletPayResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = UserWalletPayResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserWalletPayResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "history",
        .number = UserWalletPayResp_FieldNumber_History,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserWalletPayResp__storage_, history),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserWalletHistory),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserWalletPayResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserWalletPayResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThirdPartyWalletBindParam

@implementation ThirdPartyWalletBindParam

@dynamic token;
@dynamic name;
@dynamic account;
@dynamic type;
@dynamic appId;

typedef struct ThirdPartyWalletBindParam__storage_ {
  uint32_t _has_storage_[1];
  ThirdPartyWalletType type;
  NSString *token;
  NSString *name;
  NSString *account;
  NSString *appId;
} ThirdPartyWalletBindParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = ThirdPartyWalletBindParam_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ThirdPartyWalletBindParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = ThirdPartyWalletBindParam_FieldNumber_Name,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ThirdPartyWalletBindParam__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "account",
        .number = ThirdPartyWalletBindParam_FieldNumber_Account,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ThirdPartyWalletBindParam__storage_, account),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = ThirdPartyWalletBindParam_FieldNumber_Type,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ThirdPartyWalletBindParam__storage_, type),
        .defaultValue.valueEnum = ThirdPartyWalletType_InvalidTpwt,
        .dataTypeSpecific.enumDescFunc = ThirdPartyWalletType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "appId",
        .number = ThirdPartyWalletBindParam_FieldNumber_AppId,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ThirdPartyWalletBindParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\005\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThirdPartyWalletBindParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ThirdPartyWalletBindParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ThirdPartyWalletBindParam_Type_RawValue(ThirdPartyWalletBindParam *message) {
  GPBDescriptor *descriptor = [ThirdPartyWalletBindParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ThirdPartyWalletBindParam_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetThirdPartyWalletBindParam_Type_RawValue(ThirdPartyWalletBindParam *message, int32_t value) {
  GPBDescriptor *descriptor = [ThirdPartyWalletBindParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ThirdPartyWalletBindParam_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ThirdPartyWalletBindResp

@implementation ThirdPartyWalletBindResp

@dynamic hasResp, resp;
@dynamic hasThirdPartyWallet, thirdPartyWallet;

typedef struct ThirdPartyWalletBindResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  ThirdPartyWallet *thirdPartyWallet;
} ThirdPartyWalletBindResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = ThirdPartyWalletBindResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ThirdPartyWalletBindResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "thirdPartyWallet",
        .number = ThirdPartyWalletBindResp_FieldNumber_ThirdPartyWallet,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ThirdPartyWalletBindResp__storage_, thirdPartyWallet),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ThirdPartyWallet),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\002\020\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThirdPartyWalletBindResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ThirdPartyWalletBindResp__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserWalletWithdrawParam

@implementation UserWalletWithdrawParam

@dynamic token;
@dynamic thirdPartyWalletId;
@dynamic amount;
@dynamic appId;

typedef struct UserWalletWithdrawParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *appId;
  int64_t thirdPartyWalletId;
  uint64_t amount;
} UserWalletWithdrawParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = UserWalletWithdrawParam_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletWithdrawParam__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "thirdPartyWalletId",
        .number = UserWalletWithdrawParam_FieldNumber_ThirdPartyWalletId,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(UserWalletWithdrawParam__storage_, thirdPartyWalletId),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "amount",
        .number = UserWalletWithdrawParam_FieldNumber_Amount,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
        .offset = offsetof(UserWalletWithdrawParam__storage_, amount),
        .defaultValue.valueUInt64 = 0ULL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "appId",
        .number = UserWalletWithdrawParam_FieldNumber_AppId,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserWalletWithdrawParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\002\022\000\004\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserWalletWithdrawParam class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserWalletWithdrawParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserWalletWithdrawResp

@implementation UserWalletWithdrawResp

@dynamic hasResp, resp;
@dynamic hasHistory, history;

typedef struct UserWalletWithdrawResp__storage_ {
  uint32_t _has_storage_[1];
  Response *resp;
  UserWalletHistory *history;
} UserWalletWithdrawResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resp",
        .number = UserWalletWithdrawResp_FieldNumber_Resp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserWalletWithdrawResp__storage_, resp),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Response),
        .fieldOptions = NULL,
      },
      {
        .name = "history",
        .number = UserWalletWithdrawResp_FieldNumber_History,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserWalletWithdrawResp__storage_, history),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserWalletHistory),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserWalletWithdrawResp class]
                                     rootClass:[UserWalletRoot class]
                                          file:UserWalletRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserWalletWithdrawResp__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
