// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.common.proto

#import "GPBProtocolBuffers.h"

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30000
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

CF_EXTERN_C_BEGIN

@class Response;
@class User;
@class UserWallet;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum UserSex

typedef GPB_ENUM(UserSex) {
  UserSex_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  UserSex_UnknownSex = 0,

  // 男
  UserSex_Male = 1,

  // 女
  UserSex_Famale = 2,

  // 人妖
  UserSex_Shemail = 3,
};

GPBEnumDescriptor *UserSex_EnumDescriptor(void);

BOOL UserSex_IsValidValue(int32_t value);

#pragma mark - Enum UserStatus

typedef GPB_ENUM(UserStatus) {
  UserStatus_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  UserStatus_Invalid = 0,

  // 未被使用
  UserStatus_Notuse = 1,

  // 等待被使用
  UserStatus_Pending = 2,

  // 使用中
  UserStatus_Use = 3,

  // 锁定中
  UserStatus_Lock = 4,
};

GPBEnumDescriptor *UserStatus_EnumDescriptor(void);

BOOL UserStatus_IsValidValue(int32_t value);

#pragma mark - Enum UserAuthority

typedef GPB_ENUM(UserAuthority) {
  UserAuthority_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  // 基本用户权限
  UserAuthority_User = 0,

  // 管理员权限
  UserAuthority_Admin = 1,
};

GPBEnumDescriptor *UserAuthority_EnumDescriptor(void);

BOOL UserAuthority_IsValidValue(int32_t value);

#pragma mark - UserCommonRoot

@interface UserCommonRoot : GPBRootObject

// The base class provides:
//   + (GPBExtensionRegistry *)extensionRegistry;
// which is an GPBExtensionRegistry that includes all the extensions defined by
// this file and all files that it depends on.

@end

#pragma mark - TokenItem

typedef GPB_ENUM(TokenItem_FieldNumber) {
  TokenItem_FieldNumber_AppId = 1,
  TokenItem_FieldNumber_HongId = 2,
  TokenItem_FieldNumber_LoggedTime = 3,
  TokenItem_FieldNumber_ExpiredTime = 4,
};

// user login token item
@interface TokenItem : GPBMessage

// 哪个app
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;

// 红id
@property(nonatomic, readwrite) uint64_t hongId;

// 登陆时间
@property(nonatomic, readwrite) int64_t loggedTime;

// 过期时间
@property(nonatomic, readwrite) int64_t expiredTime;

@end

#pragma mark - LoginParam

typedef GPB_ENUM(LoginParam_FieldNumber) {
  LoginParam_FieldNumber_AppId = 1,
  LoginParam_FieldNumber_Username = 2,
  LoginParam_FieldNumber_Password = 3,
  LoginParam_FieldNumber_Token = 4,
};

// 登陆环途用户中心参数, 如果token存在，验证token有效性，无效时再数据库验证
@interface LoginParam : GPBMessage

// 哪个app
@property(nonatomic, readwrite, copy, null_resettable) NSString *appId;

// 用户名
@property(nonatomic, readwrite, copy, null_resettable) NSString *username;

// 密码
@property(nonatomic, readwrite, copy, null_resettable) NSString *password;

// 登陆token
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - LoginResp

typedef GPB_ENUM(LoginResp_FieldNumber) {
  LoginResp_FieldNumber_Resp = 1,
  LoginResp_FieldNumber_User = 2,
  LoginResp_FieldNumber_Token = 3,
};

@interface LoginResp : GPBMessage

@property(nonatomic, readwrite) BOOL hasResp;
@property(nonatomic, readwrite, strong, null_resettable) Response *resp;

// 用户对象
@property(nonatomic, readwrite) BOOL hasUser;
@property(nonatomic, readwrite, strong, null_resettable) User *user;

// 登陆token
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - RegisterAppUserParam

typedef GPB_ENUM(RegisterAppUserParam_FieldNumber) {
  RegisterAppUserParam_FieldNumber_Nick = 1,
  RegisterAppUserParam_FieldNumber_Tel = 2,
  RegisterAppUserParam_FieldNumber_Password = 3,
};

// 注册环途app需要的参数，只支持手机号注册
@interface RegisterAppUserParam : GPBMessage

// 昵称
@property(nonatomic, readwrite, copy, null_resettable) NSString *nick;

// 手机号
@property(nonatomic, readwrite, copy, null_resettable) NSString *tel;

// 密码
@property(nonatomic, readwrite, copy, null_resettable) NSString *password;

@end

#pragma mark - LoginAppParam

typedef GPB_ENUM(LoginAppParam_FieldNumber) {
  LoginAppParam_FieldNumber_Username = 1,
  LoginAppParam_FieldNumber_Password = 2,
  LoginAppParam_FieldNumber_Token = 3,
};

// 登陆APP需要的参数
@interface LoginAppParam : GPBMessage

// 用户名
@property(nonatomic, readwrite, copy, null_resettable) NSString *username;

// 密码
@property(nonatomic, readwrite, copy, null_resettable) NSString *password;

// 登陆token
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - LogoutParam

typedef GPB_ENUM(LogoutParam_FieldNumber) {
  LogoutParam_FieldNumber_Token = 1,
};

// 注销app需要的参数
@interface LogoutParam : GPBMessage

// 用户登陆token
@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - GetAppUserParam

typedef GPB_ENUM(GetAppUserParam_FieldNumber) {
  GetAppUserParam_FieldNumber_HongId = 1,
};

// 获取app用户信息
@interface GetAppUserParam : GPBMessage

@property(nonatomic, readwrite) uint64_t hongId;

@end

#pragma mark - User

typedef GPB_ENUM(User_FieldNumber) {
  User_FieldNumber_Id_p = 1,
  User_FieldNumber_HongId = 2,
  User_FieldNumber_Nick = 3,
  User_FieldNumber_Tel = 4,
  User_FieldNumber_Email = 5,
  User_FieldNumber_Password = 6,
  User_FieldNumber_Avatar = 7,
  User_FieldNumber_Age = 8,
  User_FieldNumber_Sex = 9,
  User_FieldNumber_Authority = 10,
  User_FieldNumber_Status = 11,
  User_FieldNumber_RegTime = 12,
  User_FieldNumber_GenTime = 13,
  User_FieldNumber_Comment = 14,
  User_FieldNumber_Auditor = 15,
  User_FieldNumber_AddrsArray = 16,
  User_FieldNumber_Wallet = 17,
};

// user
@interface User : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

// 红id
@property(nonatomic, readwrite) uint64_t hongId;

// 昵称
@property(nonatomic, readwrite, copy, null_resettable) NSString *nick;

// 手机号
@property(nonatomic, readwrite, copy, null_resettable) NSString *tel;

// 邮箱
@property(nonatomic, readwrite, copy, null_resettable) NSString *email;

// 密码
@property(nonatomic, readwrite, copy, null_resettable) NSString *password;

// 头像
@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

// 年龄
@property(nonatomic, readwrite) uint32_t age;

// 性别
@property(nonatomic, readwrite) UserSex sex;

// 权限
@property(nonatomic, readwrite) UserAuthority authority;

// 状态
@property(nonatomic, readwrite) UserStatus status;

// 注册时间
@property(nonatomic, readwrite) int64_t regTime;

// 生产时间
@property(nonatomic, readwrite) int64_t genTime;

// 备注
@property(nonatomic, readwrite, copy, null_resettable) NSString *comment;

// 操作者
@property(nonatomic, readwrite) uint64_t auditor;

// 用户地址
// |addrsArray| contains |UserAddress|
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray *addrsArray;
@property(nonatomic, readonly) NSUInteger addrsArray_Count;

// 用户钱包
@property(nonatomic, readwrite) BOOL hasWallet;
@property(nonatomic, readwrite, strong, null_resettable) UserWallet *wallet;

@end

int32_t User_Sex_RawValue(User *message);
void SetUser_Sex_RawValue(User *message, int32_t value);

int32_t User_Authority_RawValue(User *message);
void SetUser_Authority_RawValue(User *message, int32_t value);

int32_t User_Status_RawValue(User *message);
void SetUser_Status_RawValue(User *message, int32_t value);

#pragma mark - UserAddress

typedef GPB_ENUM(UserAddress_FieldNumber) {
  UserAddress_FieldNumber_Id_p = 1,
  UserAddress_FieldNumber_Name = 2,
  UserAddress_FieldNumber_Contact = 3,
  UserAddress_FieldNumber_Area = 4,
  UserAddress_FieldNumber_Detail = 5,
  UserAddress_FieldNumber_UserId = 6,
};

// 用户地址
@interface UserAddress : GPBMessage

@property(nonatomic, readwrite) int64_t id_p;

// 收件人
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

// 联系方式
@property(nonatomic, readwrite, copy, null_resettable) NSString *contact;

// 所在地区
@property(nonatomic, readwrite, copy, null_resettable) NSString *area;

// 详细地址
@property(nonatomic, readwrite, copy, null_resettable) NSString *detail;

// 关联用户
@property(nonatomic, readwrite) uint64_t userId;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

// @@protoc_insertion_point(global_scope)
