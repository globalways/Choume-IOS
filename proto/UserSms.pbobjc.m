// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.sms.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "UserSms.pbobjc.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - UserSmsRoot

@implementation UserSmsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CommonRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - UserSmsRoot_FileDescriptor

static GPBFileDescriptor *UserSmsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum SMSType

GPBEnumDescriptor *SMSType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "UnknownSms", .number = SMSType_UnknownSms },
      { .name = "Varify", .number = SMSType_Varify },
    };
    static const char *extraTextFormatInfo = "\001\000g\203\000";
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SMSType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:SMSType_IsValidValue
                                      extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

BOOL SMSType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SMSType_UnknownSms:
    case SMSType_Varify:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SendSMSParam

@implementation SendSMSParam

@dynamic appId;
@dynamic telsArray, telsArray_Count;
@dynamic type;
@dynamic text;
@dynamic templateId;

typedef struct SendSMSParam__storage_ {
  uint32_t _has_storage_[1];
  SMSType type;
  NSString *appId;
  NSMutableArray *telsArray;
  NSString *text;
  int64_t templateId;
} SendSMSParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .number = SendSMSParam_FieldNumber_AppId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SendSMSParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "telsArray",
        .number = SendSMSParam_FieldNumber_TelsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SendSMSParam__storage_, telsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = SendSMSParam_FieldNumber_Type,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(SendSMSParam__storage_, type),
        .defaultValue.valueEnum = SMSType_UnknownSms,
        .dataTypeSpecific.enumDescFunc = SMSType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "text",
        .number = SendSMSParam_FieldNumber_Text,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SendSMSParam__storage_, text),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "templateId",
        .number = SendSMSParam_FieldNumber_TemplateId,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(SendSMSParam__storage_, templateId),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\005\000\005\n\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendSMSParam class]
                                     rootClass:[UserSmsRoot class]
                                          file:UserSmsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SendSMSParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendSMSParam_Type_RawValue(SendSMSParam *message) {
  GPBDescriptor *descriptor = [SendSMSParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendSMSParam_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendSMSParam_Type_RawValue(SendSMSParam *message, int32_t value) {
  GPBDescriptor *descriptor = [SendSMSParam descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendSMSParam_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - VarifySMSCodeParam

@implementation VarifySMSCodeParam

@dynamic appId;
@dynamic tel;
@dynamic code;

typedef struct VarifySMSCodeParam__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *tel;
  NSString *code;
} VarifySMSCodeParam__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .number = VarifySMSCodeParam_FieldNumber_AppId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(VarifySMSCodeParam__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "tel",
        .number = VarifySMSCodeParam_FieldNumber_Tel,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(VarifySMSCodeParam__storage_, tel),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "code",
        .number = VarifySMSCodeParam_FieldNumber_Code,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(VarifySMSCodeParam__storage_, code),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\001\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VarifySMSCodeParam class]
                                     rootClass:[UserSmsRoot class]
                                          file:UserSmsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(VarifySMSCodeParam__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
