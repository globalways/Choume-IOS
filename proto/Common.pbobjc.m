// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - CommonRoot

@implementation CommonRoot

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum DivicePlatform

GPBEnumDescriptor *DivicePlatform_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "InvalidDp", .number = DivicePlatform_InvalidDp },
      { .name = "AndroidDp", .number = DivicePlatform_AndroidDp },
      { .name = "IosDp", .number = DivicePlatform_IosDp },
      { .name = "WebDp", .number = DivicePlatform_WebDp },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DivicePlatform)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:DivicePlatform_IsValidValue];
  }
  return descriptor;
}

BOOL DivicePlatform_IsValidValue(int32_t value__) {
  switch (value__) {
    case DivicePlatform_InvalidDp:
    case DivicePlatform_AndroidDp:
    case DivicePlatform_IosDp:
    case DivicePlatform_WebDp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ShareChannel

GPBEnumDescriptor *ShareChannel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "InvalidSc", .number = ShareChannel_InvalidSc },
      { .name = "WeiboSc", .number = ShareChannel_WeiboSc },
      { .name = "WeixinSc", .number = ShareChannel_WeixinSc },
      { .name = "PengyouquanSc", .number = ShareChannel_PengyouquanSc },
      { .name = "QqSc", .number = ShareChannel_QqSc },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ShareChannel)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ShareChannel_IsValidValue];
  }
  return descriptor;
}

BOOL ShareChannel_IsValidValue(int32_t value__) {
  switch (value__) {
    case ShareChannel_InvalidSc:
    case ShareChannel_WeiboSc:
    case ShareChannel_WeixinSc:
    case ShareChannel_PengyouquanSc:
    case ShareChannel_QqSc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NullRpcRequest

@implementation NullRpcRequest


typedef struct NullRpcRequest__storage_ {
  uint32_t _has_storage_[0];
} NullRpcRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NullRpcRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(NullRpcRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Response

@implementation Response

@dynamic code;
@dynamic msg;
@dynamic desc;

typedef struct Response__storage_ {
  uint32_t _has_storage_[1];
  NSString *msg;
  NSString *desc;
  int64_t code;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = Response_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(Response__storage_, code),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "msg",
        .number = Response_FieldNumber_Msg,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Response__storage_, msg),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "desc",
        .number = Response_FieldNumber_Desc,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(Response__storage_, desc),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(Response__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppConfig

@implementation AppConfig

@dynamic appId;
@dynamic appName;
@dynamic key;
@dynamic loginTokenDuration;

typedef struct AppConfig__storage_ {
  uint32_t _has_storage_[1];
  NSString *appId;
  NSString *appName;
  NSString *key;
  int64_t loginTokenDuration;
} AppConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "appId",
        .number = AppConfig_FieldNumber_AppId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AppConfig__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "appName",
        .number = AppConfig_FieldNumber_AppName,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AppConfig__storage_, appName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "key",
        .number = AppConfig_FieldNumber_Key,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AppConfig__storage_, key),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginTokenDuration",
        .number = AppConfig_FieldNumber_LoginTokenDuration,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(AppConfig__storage_, loginTokenDuration),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\003\001\005\000\002\007\000\004\022\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppConfig class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AppConfig__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
